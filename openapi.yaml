openapi: 3.0.0
info:
  description: "This is the CHAI backend used to provide energy information to the UI, and allow user interaction initiated through the UI."
  version: "1.0.0"
  title: "CHAI backend"
  
servers:
  - url: https://api.project-chai.org
    description: Main production server
    
security:
  - bearer_auth: []
  
tags:
- name: "heating"
  description: "Get and set heating properties of the home."
- name: "schedule"
  description: "Get and set the heating schedule of the home."
- name: "electricity"
  description: "Get information about electricity prices and usage."
- name: "logs"
  description: "Get the logs related to the AI."

paths:
  /heating/mode:
    summary: "Retrieve or change the setpoint mode and temperature of the home."
    description: ""
      
    get:
      tags:
        - heating
      responses:
        '200':
          description: "The current setpoint mode and temperature of the home."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeatingMode'
        '400':
          description: "The provided label is invalid."
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get the current setpoint mode and temperature of the home."
      description: ""
      operationId: "getHeatingMode"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the temperature."
          required: true
          schema:
            type: string
            
    put:
      tags:
        - heating
      responses:
        '200':
          description: OK
        '400':
          description: >
            The provided label is invalid, or
            the temperature is not a number within the range [7, 30].
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Change the setpoint mode (and target temperature) of the home."
      description: ""
      operationId: "setHeatingMode"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the temperature."
          required: true
          schema:
            type: string
        - name: mode
          in: query
          description: "The current mode."
          required: true
          schema:
            type: string
            enum: [auto, on, off]
        - name: target
          in: query
          description: "The desired temperature in auto mode."
          required: false
          schema:
            type: number
            minimum: 7
            maximum: 30
        - name: timeout
          in: query
          description: "The timeout in minutes for the manual mode."
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 1440
            default: 1440

  /heating/valve:
    get:
      tags:
        - heating
      responses:
        '200':
          description: "The current valve status."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValveStatus'
        '400':
          description: "The provided label is invalid."
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get the current valve status."
      description: ""
      operationId: "getValveStatus"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the valve status."
          required: true
          schema:
            type: string

  /heating/profile:
    get:
      tags:
        - heating
      responses:
        '200':
          description: "The profile information is a specific profile is requested, or a list of profiles if a profile ID was not specified."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Profiles'
                  - $ref: '#/components/schemas/Profile'
        '400':
          description: "The provided home label or profile ID is invalid."
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get the profile information for one or all profiles."
      description: ""
      operationId: "getProfile"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the valve status."
          required: true
          schema:
            type: string
        - name: profile
          in: query
          description: "The ID of the profile you want the data for. **If this option is set you get a dictionary, instead of a list of dictionaries, as response.**"
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 5

  /heating/historic:
    get:
      tags:
        - heating
      responses:
        '200':
          description: "The historic data of the home."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeatingHistoric'
        '400':
          description: "The provided label is invalid."
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get historic data on the temperature or valve status in the home."
      description: ""
      operationId: "getHeatingHistoric"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the valve status."
          required: true
          schema:
            type: string
        - name: source
          in: query
          description: "The historic data source to fetch, either temperature or valve status."
          required: true
          schema:
            type: string
            enum: [ "temperature", "valve_status" ]
        - name: start
          in: query
          description: 'AN ISO8601 date indicating the start (inclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$ . If omitted, the start date is 7 days ago, or 7 days before the end date if an end date is provided.'
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: 'AN ISO8601 date indicating the end (exclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$ . The end date is now if omitted.'
          required: false
          schema:
            type: string

  /logs:
    get:
      tags:
        - logs
      responses:
        '200':
          description: "The matching logs generated by the AI."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: "The provided label is invalid, the start date is invalid, the end date is invalid, or the limit does not fall within the allowed range."
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get the AI logs matching certain criteria."
      description: ""
      operationId: "getLogs"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the logs."
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: 'AN ISO8601 date indicating the start (inclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$'
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: 'AN ISO8601 date indicating the end (exclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$'
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: "The category of logs to return, or a comma-separated list of categories of logs to return."
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: "The maximum number of logs to return."
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 1000

  /electricity/prices:
    get:
      tags:
        - electricity
      responses:
        '200':
          description: "Returns a list of import or export rates with each rate expressed in p/kWh."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rate'
        '400':
          description: >
            Either the start or end date is not a valid ISO8601 date,
            only an end date was provided without specifying a start date,
            or the limit is less than 1.
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get the current import/export rate and all upcoming import/export rates, or get the import/export rate from another starting point by adding a start parameter, or get import/export rates within a defined range by adding both a start and end parameter."
      description: ""
      operationId: "getPrices"
      parameters:
        - name: start
          in: query
          description: 'AN ISO8601 date indicating the start (inclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$'
          required: false
          schema:
            type: string
            default: <current datetime>
        - name: end
          in: query
          description: 'AN ISO8601 date indicating the end (exclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$'
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 'The maximum number of import/export rates to return. The number of returned entries is counted from start (if specified) or current datetime.'
          required: false
          schema:
            type: integer
            minimum: 1
            
  /electricity/consumption:
    get:
      tags:
        - electricity
      responses:
        '200':
          description: "Returns a list of the consumption of a home expressed in kWh."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consumption'
        '400':
          description: >
            The provided label is invalid,
            either the start or end date is not a valid ISO8601 date,
            only an end date was provided without specifying a start date,
            or the limit is less than 1.
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get the expected upcoming consumption values, or get the consumption values from another starting point by adding a start parameter, or get consumption values within a defined range by adding both a start and end parameter."
      description: ""
      operationId: "getConsumption"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the consumption."
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: 'AN ISO8601 date indicating the start (inclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$'
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: 'AN ISO8601 date indicating the end (exclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$'
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 'The maximum number of consumption entries to return. The number of returned entries is counted from the start (if specified) or current time.'
          required: false
          schema:
            type: integer
            minimum: 1
            
  /electricity/costs:
    get:
      tags:
        - electricity
      responses:
        '200':
          description: "Returns a list of the costs of a home expressed in £."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cost'
        '400':
          description: >
            The provided label is invalid,
            either the start or end date is not a valid ISO8601 date,
            only an end date was provided without specifying a start date,
            or the limit is less than 1.
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get the expected upcoming costs, or get the costs from another starting point by adding a start parameter, or get costs within a defined range by adding both a start and end parameter."
      description: ""
      operationId: "getCosts"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the costs."
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: 'AN ISO8601 date indicating the start (inclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$'
          required: false
          schema:
            type: string
        - name: end
          in: query
          description: 'AN ISO8601 date indicating the end (exclusive) of the interval. The accepted format is ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(?::\d{2})?(?:([+-]\d\d:\d\d)|Z)?$'
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 'The maximum number of cost entries to return. The number of returned entries is counted from the start (if specified) or current time.'
          required: false
          schema:
            type: integer
            minimum: 1

  /schedule:
    get:
      tags:
        - schedule
      responses:
        '200':
          description: "Returns a list of the schedule of a home."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatedSchedule'
        '400':
          description: "The provided label is invalid."
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Get the schedule for any given day of the week, or for the entire week."
      description: ""
      operationId: "getSchedule"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the schedule."
          required: true
          schema:
            type: string
        - name: daymask
          in: query
          description: "The day mask for which you want to get the schedule."
          required: false
          schema:
            type: integer
            description: "The day mask is a bitmask of the days of the week. The bitmask is a sum of the powers of 2 for the days of the week. Including 1 means Monday, including 2 means Tuesday, including 4 means Wednesday, etc. For example, if the bitmask is 5, it means that the schedule is set for Monday and Wednesday. If the bitmask is 127 it means every day of the week."
            example: 96
    put:
      tags:
        - schedule
      responses:
        '200':
          description: "OK"
        '400':
          description: "The provided label is invalid, the day mask is invalid, or the schedule is invalid."
        '401':
          description: "The bearer token is not provided or is invalid."
        '500':
          description: "The server experience an internal error."
      summary: "Set a new schedule for a day or multiple days."
      description: ""
      operationId: "setSchedule"
      parameters:
        - name: label
          in: query
          description: "The unique label of the home for which you are requesting the schedule."
          required: true
          schema:
            type: string
        - name: daymask
          in: query
          description: "The day mask for which you are setting the schedule."
          required: true
          schema:
            type: integer
            description: "The day mask is a bitmask of the days of the week. The bitmask is a sum of the powers of 2 for the days of the week. Including 1 means Monday, including 2 means Tuesday, including 4 means Wednesday, etc. For example, if the bitmask is 5, it means that the schedule is set for Monday and Wednesday. If the bitmask is 127 it means every day of the week."
            example: 96
      requestBody:
        description: The definition of a new schedule.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'


components:

  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HeatingMode:
      type: object
      properties:
        temperature:
          type: number
          description: The current temperature in the room/house.
          example: 20.5
        mode:
          type: string
          enum: [auto, on, off]
          example: auto
        target_temperature:
          type: number
          description: The target temperature when in auto mode.
          nullable: true
          example: 21
    
  
    ValveStatus:
      type: object
      properties:
        open:
          type: boolean
          description: Whether the valve is currently open.
    
    Log:
      type: object
      properties:
        timestamp:
          type: string
          format: ISO8601
          example: 2022-04-15T12:30:00
        category:
          type: string
          description: The category of the log entry.
          example: "SETPOINT_CHANGE"
        parameters:
          type: array
          items:
            type: string
          description: The positional arguments associated with an entry in this category.
          example: "[5]"
    
    Rate:
      type: object
      properties:
        start: 
          type: string
          format: ISO8601
          example: 2022-04-15T12:00
        end: 
          type: string
          format: ISO8601
          example: 2022-04-15T12:30
        rate:
          type: number
          example: 13.14
          
    Consumption:
      type: object
      properties:
        start: 
          type: string
          format: ISO8601
          example: 2022-04-15T12:00
        end: 
          type: string
          format: ISO8601
          example: 2022-04-15T12:30
        consumption:
          type: number
          example: 0.156
        predicted:
          type: boolean
          example: false
          
    Cost:
      type: object
      properties:
        start: 
          type: string
          format: ISO8601
          example: 2022-04-15T12:00
        end: 
          type: string
          format: ISO8601
          example: 2022-04-15T12:30
        cost:
          type: number
          example: 0.31
        predicted:
          type: boolean
          example: false

    DatedSchedule:
      type: object
      properties:
        day:
          type: integer
          description: The mask of the single day the schedule applies to.
          example: 4
        schedule:
          $ref: '#/components/schemas/Schedule'


    Schedule:
      type: array
      description: "A schedule is a list of profiles that are triggered at various times of the day. Each entry in the list specifies a time slot (as key) and a profile (as value) to apply. A time slot is a number indicating the 15 min intervals since midnight. For example, 1 indicates 00:15 and 18 indicates 04:30 in local time. The value associated with a time slot is the identifier of the profile to apply starting from that time. For example, an entry such as 18:1 indicates that at 4:30 local time onwards the 1st profile should take effect. For consistency both the key and the value should be strings."
      items:
        type: object
        additionalProperties:
          type: string
        example:
          0: "1"
          20: "2"

    Profile:
      type: object
      description: "Information for the line equation that governs a profile. Within the domain [7, 30] and given a cost c the setpoint temperature t is calculated as t = slope * c + bias ."
      properties:
        id:
          type: integer
          example: 2
        slope:
          type: number
          example: 3.2
        bias:
          type: number
          example: 0.71

    Profiles:
      type: array
      description: "A list of profiles properties, where the index in the array matches with the profile number."
      items:
        $ref: '#/components/schemas/Profile'

    HeatingHistoric:
      type: array
      description: "A time-tagged list of sorted (oldest to newest) historic values for the heating system."
      items:
        type: object
        properties:
          timestamp:
            type: string
            format: ISO8601
            example: 2022-04-15T12:30:00
          value:
            type: number
            description: The historic temperature at this timestamp if requesting temperatures, or the percentage that the valve is open at this timestamp if requesting the valve status.
            example: 20.5

